<?xml version = '1.0' encoding = 'UTF-8' ?>
<XMI xmi.version = '1.2' xmlns:UML = 'org.omg.xmi.namespace.UML' timestamp = 'Thu May 03 23:46:40 BST 2007'>
  <XMI.header>    <XMI.documentation>
      <XMI.exporter>ArgoUML (using Netbeans XMI Writer version 1.0)</XMI.exporter>
      <XMI.exporterVersion>PRE-0.25.3(5) revised on $Date: 2006-11-06 18:55:22 +0000 (seg, 06 Nov 2006) $ </XMI.exporterVersion>
    </XMI.documentation>
    <XMI.metamodel xmi.name="UML" xmi.version="1.4"/></XMI.header>
  <XMI.content>
    <UML:Model xmi.id = '1:00000000000008A4' name = 'UML Profile for C++' isSpecification = 'false'
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
      <UML:ModelElement.stereotype>
        <UML:Stereotype xmi.idref = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000895'/>
      </UML:ModelElement.stereotype>
      <UML:ModelElement.taggedValue>
        <UML:TaggedValue xmi.id = '1:00000000000008A6' isSpecification = 'false'>
          <UML:TaggedValue.dataValue>This UML profile which provides the needed stereotypes and tag definitions for use with the ArgoUML C++ module.</UML:TaggedValue.dataValue>
          <UML:TaggedValue.type>
            <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
          </UML:TaggedValue.type>
        </UML:TaggedValue>
        <UML:TaggedValue xmi.id = '1:00000000000008A7' isSpecification = 'false'>
          <UML:TaggedValue.dataValue>Luís Sérgio Oliveira</UML:TaggedValue.dataValue>
          <UML:TaggedValue.type>
            <UML:TagDefinition xmi.idref = '1:0000000000000854'/>
          </UML:TaggedValue.type>
        </UML:TaggedValue>
        <UML:TaggedValue xmi.id = '1:00000000000008A8' isSpecification = 'false'>
          <UML:TaggedValue.dataValue>0.03</UML:TaggedValue.dataValue>
          <UML:TaggedValue.type>
            <UML:TagDefinition xmi.idref = '1:00000000000008A9'/>
          </UML:TaggedValue.type>
        </UML:TaggedValue>
        <UML:TaggedValue xmi.id = '1:00000000000008AC' isSpecification = 'false'>
          <UML:TaggedValue.dataValue>0.20</UML:TaggedValue.dataValue>
          <UML:TaggedValue.type>
            <UML:TagDefinition xmi.idref = '1:00000000000008AD'/>
          </UML:TaggedValue.type>
        </UML:TaggedValue>
      </UML:ModelElement.taggedValue>
      <UML:Namespace.ownedElement>
        <UML:Stereotype xmi.id = '1:000000000000085A' name = 'cppClass' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
          <UML:ModelElement.taggedValue>
            <UML:TaggedValue xmi.id = '1:0000000000000821' isSpecification = 'false'>
              <UML:TaggedValue.dataValue>Stereotype to apply to C++ classes for code generation.
Note: use of this stereotype isn&apos;t required, it is more a convenience for having the available tag definitions from the C++ UML Profile.</UML:TaggedValue.dataValue>
            </UML:TaggedValue>
          </UML:ModelElement.taggedValue>
          <UML:Stereotype.definedTag>
            <UML:TagDefinition xmi.id = '1:0000000000000826' name = 'constructor' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000823'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000822' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000824' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If true – generates a default constructor for the class.
Else, if false (default) – no default constructor is generated, unless it is explicitly modeled with the «create» stereotype.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000825' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If true – generates a default constructor for the class.
Else, if false (default) – no default constructor is generated, unless it is explicitly modeled with the «create» stereotype.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000082C' name = 'source_incl' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000828'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000827' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000829' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the file to include in the source (e.g., .cpp file). If we desire to have multiple headers included this way, just use multiple tagged values with source_incl as the tag.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000082A' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the file to include in the source (e.g., .cpp file).
Note: if we desire to have multiple headers included this way, just use multiple tagged values with source_incl as the tag.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000082B' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the file to include in the source (e.g., .cpp file).
Note: if we desire to have multiple headers included this way, just use multiple tagged values with source_incl as the tag.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000831' name = 'header_incl' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000082E'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000082D' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000082F' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the file to include in the header. If we desire to have multiple headers included this way, just use multiple tagged values with header_incl as the tag.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000830' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the file to include in the header. If we desire to have multiple headers included this way, just use multiple tagged values with header_incl as the tag.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000836' name = 'typedef_public'
              isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000833'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000832' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000834' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the public area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000835' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the public area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000083B' name = 'typedef_protected'
              isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000838'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000837' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000839' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the protected area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000083A' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the protected area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000840' name = 'typedef_private'
              isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000083D'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000083C' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000083E' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the private area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000083F' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the private area of the class with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000845' name = 'typedef_global_header'
              isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000842'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000841' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000843' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the global area of the header file with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000844' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the global area of the header file with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000084A' name = 'typedef_global_source'
              isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000847'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000846' lower = '0' upper = '-1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000848' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the global area of the source file with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000849' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>&lt;source type&gt; &lt;type_name&gt; – creates typedef line in the global area of the source file with typedef &lt;source type&gt; &lt;type name&gt;.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000084F' name = 'email' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000084C'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000084B' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000084D' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>name@domain.country – replaces the tag |EMAIL| of the template file.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000084E' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>name@domain.country – replaces the tag |EMAIL| of the template file.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000854' name = 'author' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000851'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000850' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000852' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>name – replaces the tag |AUTHOR| of the template file.
Note: you may simply use the Author property in the documentation property panel.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000853' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>name – replaces the tag |AUTHOR| of the template file.
Note: you may simply use the Author property in the documentation property panel.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000859' name = 'TemplatePath' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000856'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000855' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000857' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Directory – will search in the specified directory for the template files &quot;header_template&quot; and &quot;cpp_template&quot; which are placed in top of the corresponding file. The following tags in the template file are replaced by model values: |FILENAME|, |DATE|, |YEAR|, |AUTHOR|, |EMAIL|. If no such tag is specified, the templates are searched in the subdirectory of the root directory for the code generation.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000858' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Directory – will search in the specified directory for the template files &quot;header_template&quot; and &quot;cpp_template&quot; which are placed in top of the corresponding file. The following tags in the template file are replaced by model values: |FILENAME|, |DATE|, |YEAR|, |AUTHOR|, |EMAIL|. If no such tag is specified, the templates are searched in the subdirectory of the root directory for the code generation.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000088F'
              name = 'cpp_class_specifier' isSpecification = 'false' tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000893'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000892'
                      lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000894'
                  isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Name of the C++ class specifier tagged value. Possible values are: class, union, and struct. When this is ommited, class is used.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
          </UML:Stereotype.definedTag>
        </UML:Stereotype>
        <UML:DataType xmi.id = '1:0000000000000873' name = 'int' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '1:0000000000000874' name = 'bool' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:Stereotype xmi.id = '1:000000000000088F' name = 'cppAttribute' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Attribute</UML:Stereotype.baseClass>
          <UML:Stereotype.definedTag>
            <UML:TagDefinition xmi.id = '1:0000000000000879' name = 'usage' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000876'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000875' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000877' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If &quot;header&quot;, will lead for class types to a pre-declaration in the header, and the include of the remote class header in the header of the generated class.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000878' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If &quot;header&quot;, will lead for class types to a pre-declaration in the header, and the include of the remote class header in the header of the generated class.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000087D' name = 'get' isSpecification = 'false'
              tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000087B'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000087A' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000087C' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>private || protected || public – creates a simple function to get the attribute by a function (return by reference is used for class-types, else call by value); place the function in the given visibility area.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000881' name = 'set' isSpecification = 'false'
              tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000087F'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000087E' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000880' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>private || protected || public – creates a simple function to set the attribute by a function (call by reference is used for class-types, else call by value); place the function in the given visibility area.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:0000000000000886' name = 'pointer' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000883'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000882' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000884' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If true, the type of the member variable will be a pointer to the attribute type. For example, if you have the UML Attribute: name: std::string, with the pointer tagged value set to true, the generated member variable would be: std::string* name;
If false (default), no pointer modifier is applied.</UML:TaggedValue.dataValue>
                </UML:TaggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000885' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If true, the type of the member variable will be a pointer to the attribute type. For example, if you have the UML Attribute: name: std::string, with the pointer tagged value set to true, the generated member variable would be: std::string* name;
If false (default), no pointer modifier is applied.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000088A' name = 'reference' isSpecification = 'false'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:0000000000000888'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:0000000000000887' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:0000000000000889' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>true – the type of the member variable will be a reference to the attribute type.
false (default) – no reference modifier is applied.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:000000000000088E' name = 'MultiplicityType'
              isSpecification = 'false' tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000088C'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000088B' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000088D' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>It may assume one of the values: list || slist || vector || map || stack || stringmap – will define a multiplicity as the corresponding STL container, if the Multiplicity range of the attribute is variable (for fixed size ranges this setting is ignored).</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
          </UML:Stereotype.definedTag>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = '1:0000000000000892' name = 'documentation'
          isSpecification = 'false' tagType = 'String'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = '10-0-1-5--6f4d6bc4:112541528f6:-8000:00000000000009A5'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = '10-0-1-5--6f4d6bc4:112541528f6:-8000:00000000000009A4'
                  lower = '0' upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:TagDefinition xmi.id = '1:0000000000000895' name = 'src_path' isSpecification = 'false'
          tagType = 'String'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = '1:0000000000000894'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = '1:0000000000000893' lower = '0' upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:TagDefinition xmi.id = '1:0000000000000898' name = 'src_lang' isSpecification = 'false'
          tagType = 'String'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = '1:0000000000000897'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = '1:0000000000000896' lower = '0' upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Stereotype xmi.id = '1:00000000000008A2' name = 'cppParameter' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Parameter</UML:Stereotype.baseClass>
          <UML:ModelElement.taggedValue>
            <UML:TaggedValue xmi.id = '1:0000000000000899' isSpecification = 'false'>
              <UML:TaggedValue.dataValue>_Variable passing semantics_

If a Parameter for an Operation is marked as out or inout the variable will be passed by reference (default) or pointer (needs tagged value pointer), otherwise by value.

Return values in UML are simply Parameters marked as return, therefore everything here applies to them, except where explicitly noted.
Warning
Note that UML allows multiple return values. This is possible to support in C++ as out parameters, but, currently the generator doesn&apos;t supports it.

This problem is being handled in issue #3553 – handle multiple return parameters.</UML:TaggedValue.dataValue>
              <UML:TaggedValue.type>
                <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
              </UML:TaggedValue.type>
            </UML:TaggedValue>
          </UML:ModelElement.taggedValue>
          <UML:Stereotype.definedTag>
            <UML:TagDefinition xmi.id = '1:000000000000089D' name = 'reference' isSpecification = 'false'
              tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000089B'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000089A' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:000000000000089C' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>true – the type of the parameter will be a reference to the parameter type.
false (default) – no reference modifier is applied.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '1:00000000000008A1' name = 'pointer' isSpecification = 'false'
              tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '1:000000000000089F'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '1:000000000000089E' lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '1:00000000000008A0' isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>If true, the type of the parameter will be a pointer to the parameter type. For example, if you have the UML Parameter: name: std::string, with the pointer tagged value set to true, the generated member variable would be: std::string* name;
If false (default), no pointer modifier is applied.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
          </UML:Stereotype.definedTag>
        </UML:Stereotype>
        <UML:DataType xmi.id = '1:00000000000008A3' name = 'void' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:TagDefinition xmi.id = '1:00000000000008A9' name = 'version' isSpecification = 'false'
          tagType = 'String'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = '1:00000000000008AA'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = '1:00000000000008AB' lower = '0' upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:TagDefinition xmi.id = '1:00000000000008AD' name = 'since' isSpecification = 'false'
          tagType = 'String'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = '1:00000000000008AE'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = '1:00000000000008AF' lower = '0' upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Package xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:0000000000000869'
          name = 'std' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:ModelElement.taggedValue>
            <UML:TaggedValue xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086A'
              isSpecification = 'false'>
              <UML:TaggedValue.dataValue>The C++ standard library</UML:TaggedValue.dataValue>
            </UML:TaggedValue>
          </UML:ModelElement.taggedValue>
        </UML:Package>
        <UML:DataType xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086B'
          name = 'unsigned int' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086C'
          name = 'char' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086D'
          name = 'unsigned char' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086E'
          name = 'long' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '10-0-1-4-8c436b:10bce9cf2cc:-8000:000000000000086F'
          name = 'unsigned long' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:Stereotype xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000873'
          name = 'cppGeneralization' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Generalization</UML:Stereotype.baseClass>
          <UML:Stereotype.definedTag>
            <UML:TagDefinition xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000879'
              name = 'cpp_virtual_inheritance' isSpecification = 'false' tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000883'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000882'
                      lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000884'
                  isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Default value (if the tagged value doesn&apos;t exist) is false. Type is  Boolean.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
            <UML:TagDefinition xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000885'
              name = 'cpp_inheritance_visibility' isSpecification = 'false' tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:0000000000000898'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:0000000000000897'
                      lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000088A'
                  isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Default value is public and possible values are: private, protected and public.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
          </UML:Stereotype.definedTag>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000895'
          name = 'profile' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000896'
          name = 'wchar_t' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000897'
          name = 'short' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000898'
          name = '__int64' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:0000000000000899'
          name = '__w64' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000089A'
          name = 'signed' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000089B'
          name = 'unsigned' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000089C'
          name = 'float' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:DataType xmi.id = '-64--88-1-2-914f6a:111b9c5054e:-8000:000000000000089D'
          name = 'double' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'/>
        <UML:Stereotype xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:0000000000000890'
          name = 'realize' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:0000000000000891'
          name = 'cppRealization' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Model</UML:Stereotype.baseClass>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
          <UML:Stereotype.definedTag>
            <UML:TagDefinition xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:000000000000089A'
              name = 'cpp_inheritance_visibility' isSpecification = 'false' tagType = 'String'>
              <UML:TagDefinition.multiplicity>
                <UML:Multiplicity xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:000000000000089E'>
                  <UML:Multiplicity.range>
                    <UML:MultiplicityRange xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:000000000000089D'
                      lower = '0' upper = '1'/>
                  </UML:Multiplicity.range>
                </UML:Multiplicity>
              </UML:TagDefinition.multiplicity>
              <UML:ModelElement.taggedValue>
                <UML:TaggedValue xmi.id = '10-0-1-5--c7850e9:112476951ff:-8000:000000000000089F'
                  isSpecification = 'false'>
                  <UML:TaggedValue.dataValue>Default value is public and possible values are: private, protected and public.</UML:TaggedValue.dataValue>
                  <UML:TaggedValue.type>
                    <UML:TagDefinition xmi.idref = '1:0000000000000892'/>
                  </UML:TaggedValue.type>
                </UML:TaggedValue>
              </UML:ModelElement.taggedValue>
            </UML:TagDefinition>
          </UML:Stereotype.definedTag>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000821' name = 'access' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Permission</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000822' name = 'friend' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Permission</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000823' name = 'import' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Permission</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000824' name = 'association' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>AssociationEnd</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000825' name = 'global' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>AssociationEnd</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000826' name = 'local' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>AssociationEnd</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000827' name = 'parameter' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>AssociationEnd</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000828' name = 'self' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>AssociationEnd</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000829' name = 'become' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Flow</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082A' name = 'copy' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Flow</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082B' name = 'create' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Usage</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082C' name = 'call' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Usage</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082D' name = 'instantiate' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Usage</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082E' name = 'send' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Usage</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000082F' name = 'create' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>BehavioralFeature</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000830' name = 'destroy' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>BehavioralFeature</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000831' name = 'create' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>CallEvent</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000832' name = 'destroy' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>CallEvent</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000833' name = 'derive' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000834' name = 'realize' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000835' name = 'refine' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000836' name = 'trace' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000837' name = 'document' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000838' name = 'executable' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000839' name = 'file' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083A' name = 'library' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083B' name = 'table' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083C' name = 'facade' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083D' name = 'framework' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083E' name = 'metamodel' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000083F' name = 'stub' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000840' name = 'implementation' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Generalization</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000841' name = 'implementation' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000842' name = 'type' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000843' name = 'implicit' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Association</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000844' name = 'invariant' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000845' name = 'postcondition' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000846' name = 'precondition' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000847' name = 'metaclass' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000848' name = 'powertype' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000849' name = 'process' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Classifier</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084A' name = 'thread' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Classifier</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084B' name = 'utility' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Classifier</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084C' name = 'requirement' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Comment</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084D' name = 'responsibility' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Comment</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084E' name = 'topLevel' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000084F' name = 'systemModel' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:000000000000086A' name = 'signalflow' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>ObjectFlowState</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:DataType xmi.id = '.:000000000000086B' name = 'void' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:000000000000086C' name = 'int' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:000000000000086D' name = 'short' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:000000000000086E' name = 'long' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:000000000000086F' name = 'double' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:0000000000000870' name = 'float' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:0000000000000871' name = 'char' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:0000000000000872' name = 'byte' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:DataType xmi.id = '.:0000000000000873' name = 'boolean' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:Stereotype xmi.id = '.:0000000000000874' name = 'appliedProfile' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000875' name = 'auxiliary' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000876' name = 'modelLibrary' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000877' name = 'profile' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Package</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000878' name = 'source' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = '.:0000000000000879' name = 'stateInvariant' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
      </UML:Namespace.ownedElement>
    </UML:Model>
  </XMI.content>
</XMI>
